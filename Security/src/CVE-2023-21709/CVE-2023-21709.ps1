# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

<#
.SYNOPSIS
    This script removes the TokenCacheModule from IIS to protect Exchange Server against CVE-2023-21709.
.DESCRIPTION
    The script removes the TokenCacheModule  from IIS to protect Exchange Server against CVE-2023-21709.
    It comes with a parameter that allows you to explicitly specify a subset of Exchange servers on which the TokenCacheModule
    should be removed or restored (ExchangeServerNames).
    It's also possible to exclude a subset of Exchange servers from the operation performed by the script (SkipExchangeServerNames).
.PARAMETER ExchangeServerNames
    Use this parameter to explicitly specify the Exchange servers on which the TokenCacheModule should be removed or restored.
.PARAMETER SkipExchangeServerNames
    Use this parameter to explicitly exclude Exchange servers from removing or restoring the TokenCacheModule.
.PARAMETER Rollback
    Use this parameter rollback the CVE-2023-21709 configuration and add the TokenCacheModule back to IIS.
.PARAMETER ScriptUpdateOnly
    This optional parameter allows you to only update the script without performing any other actions.
.PARAMETER SkipVersionCheck
    This optional parameter allows you to skip the automatic version check and script update.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1
    It will remove the TokenCacheModule from all of the Exchange servers in the organization.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1 -ExchangeServerNames <Array_of_Server_Names>
    It will remove the TokenCacheModule from all of the Exchange servers provided via -ExchangeServerNames parameter.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1 -SkipExchangeServerNames <Array_of_Server_Names>
    It will remove the TokenCacheModule from all of the Exchange servers in the organization except the Exchange servers provided via -SkipExchangeServerNames parameter.
.EXAMPLE
    PS C:\> .\CVE-2023-21709.ps1 -Rollback
    It will restore the TokenCacheModule on all Exchange servers within the organization.
#>

[CmdletBinding(DefaultParameterSetName = "Default", SupportsShouldProcess = $true, ConfirmImpact = 'High')]
param(
    [Parameter(Mandatory = $false, ValueFromPipelineByPropertyName = $true, ParameterSetName = "Default")]
    [Alias("Name", "Fqdn")]
    [string[]]$ExchangeServerNames = $null,

    [Parameter(Mandatory = $false, ParameterSetName = "Default")]
    [string[]]$SkipExchangeServerNames = $null,

    [Parameter(Mandatory = $false, ParameterSetName = "Default")]
    [switch]$Rollback,

    [Parameter(Mandatory = $false, ParameterSetName = "ScriptUpdateOnly")]
    [switch]$ScriptUpdateOnly,

    [Parameter(Mandatory = $false, ParameterSetName = "Default")]
    [switch]$SkipVersionCheck
)

begin {
    $BuildVersion = ""

    . $PSScriptRoot\ConfigurationAction\Invoke-TokenCacheModuleAction.ps1
    . $PSScriptRoot\..\..\..\Shared\OutputOverrides\Write-Host.ps1
    . $PSScriptRoot\..\..\..\Shared\OutputOverrides\Write-Progress.ps1
    . $PSScriptRoot\..\..\..\Shared\OutputOverrides\Write-Verbose.ps1
    . $PSScriptRoot\..\..\..\Shared\ScriptUpdateFunctions\Test-ScriptVersion.ps1
    . $PSScriptRoot\..\..\..\Shared\Confirm-Administrator.ps1
    . $PSScriptRoot\..\..\..\Shared\Confirm-ExchangeShell.ps1
    . $PSScriptRoot\..\..\..\Shared\LoggerFunctions.ps1
    . $PSScriptRoot\..\..\..\Shared\Show-Disclaimer.ps1

    function Write-VerboseLog ($Message) {
        $Script:Logger = $Script:Logger | Write-LoggerInstance $Message
    }

    function Write-HostLog ($Message) {
        $Script:Logger = $Script:Logger | Write-LoggerInstance $Message
    }

    $loggerInstanceParams = @{
        LogName                  = "CVE-2023-21709-$((Get-Date).ToString("yyyyMMddhhmmss"))-Debug"
        AppendDateTimeToFileName = $false
        ErrorAction              = "SilentlyContinue"
    }

    $Script:Logger = Get-NewLoggerInstance @loggerInstanceParams

    SetWriteHostAction ${Function:Write-HostLog}
    SetWriteVerboseAction ${Function:Write-VerboseLog}
    SetWriteProgressAction ${Function:Write-HostLog}

    $exchangeServersToProcess = New-Object "System.Collections.Generic.List[string]"
} process {
    if ($null -ne $ExchangeServerNames) {
        Write-Verbose ("Adding server(s): $([string]::Join(", ", $ExchangeServerNames)) to the list of servers to be processed...")
        $exchangeServersToProcess.AddRange($ExchangeServerNames)
    } else {
        Write-Verbose ("No server was passed via the ExchangeServerNames parameter")
    }
} end {
    if (-not(Confirm-Administrator)) {
        Write-Host "The script needs to be executed in elevated mode. Start the PowerShell as an administrator." -ForegroundColor Yellow
        exit
    }

    $versionsUrl = "https://aka.ms/CVE-2023-21709-VersionsUrl"
    Write-Host ("CVE-2023-21709 script version $($BuildVersion)") -ForegroundColor Green

    if ($ScriptUpdateOnly) {
        switch (Test-ScriptVersion -AutoUpdate -VersionsUrl $versionsUrl -Confirm:$false) {
            ($true) { Write-Host ("Script was successfully updated") -ForegroundColor Green }
            ($false) { Write-Host ("No update of the script performed") -ForegroundColor Yellow }
            default { Write-Host ("Unable to perform ScriptUpdateOnly operation") -ForegroundColor Red }
        }
        return
    }

    if ((-not($SkipVersionCheck)) -and
        (Test-ScriptVersion -AutoUpdate -VersionsUrl $versionsUrl -Confirm:$false)) {
        Write-Host ("Script was updated. Please re-run the command") -ForegroundColor Yellow
        return
    }

    $exchangeShell = Confirm-ExchangeShell
    if (-not($exchangeShell.ShellLoaded)) {
        Write-Host "Failed to load the Exchange Management Shell. Start the script using the Exchange Management Shell." -ForegroundColor Yellow
        exit
    }

    try {
        $iisAppPoolWording = "Note that each Exchange server's IIS Application Pool will be restarted after either applying the setting change or restore action."
        $vulnerabilityMoreInformationWording = "More information about the vulnerability can be found here: https://portal.msrc.microsoft.com/security-guidance/advisory/CVE-2023-36434."
        if (-not($Rollback)) {
            $params = @{
                Message   = "Display Warning about TokenCacheModule removal operation"
                Target    = "Removal of TokenCacheModule from IIS can be done to mitigate CVE-2023-21709 and CVE-2023-36434 vulnerability. " +
                "The recommended solution to address those is to install the Windows Server October 2023 security update (or later)." +
                "`r`nRemoval of this module might have performance impact during first logon after cache is removed for OWA/ECP and Exchange Active Sync clients. " +
                "$iisAppPoolWording" +
                "`r`n$vulnerabilityMoreInformationWording" +
                "`r`nDo you want to proceed?"
                Operation = "Removing TokenCacheModule from IIS"
            }
        } else {
            $params = @{
                Message   = "Display Warning about TokenCacheModule rollback operation"
                Target    = "TokenCacheModule will be restored in IIS. This makes the system vulnerable to the CVE-2023-21709 and CVE-2023-36434 again if the Windows Server October 2023 security update (or later) was not installed before. " +
                "$iisAppPoolWording" +
                "`r`n$vulnerabilityMoreInformationWording" +
                "`r`nDo you want to proceed?"
                Operation = "Adding TokenCacheModule back to IIS"
            }
        }
        Show-Disclaimer @params

        Write-Verbose ("Running Get-ExchangeServer to get list of all Exchange servers")
        Set-ADServerSettings -ViewEntireForest $true
        $ExchangeServers = Get-ExchangeServer | Where-Object {
            (($_.AdminDisplayVersion -like "Version 15*") -and
            ($_.ServerRole -ne "Edge"))
        }

        if (($null -ne $exchangeServersToProcess) -and
            ($exchangeServersToProcess.Count -gt 0)) {
            Write-Host "Running only on Exchange servers: $([string]::Join(", " ,$exchangeServersToProcess))"
            $ExchangeServers = $ExchangeServers | Where-Object {
                (($_.Name -in $exchangeServersToProcess) -or
                ($_.FQDN -in $exchangeServersToProcess))
            }
        }

        if (($null -ne $SkipExchangeServerNames) -and
            ($SkipExchangeServerNames.Count -gt 0)) {
            Write-Host "Skipping Exchange servers: $([string]::Join(", ", $SkipExchangeServerNames))"
            # Remove all the servers present in the SkipExchangeServerNames list
            $ExchangeServers = $ExchangeServers | Where-Object {
                (($_.Name -notin $SkipExchangeServerNames) -and
                ($_.FQDN -notin $SkipExchangeServerNames))
            }
        }

        if ($null -eq $ExchangeServers) {
            Write-Host "No Exchange servers to process. Please specify server filters correctly" -ForegroundColor Red
            exit
        }

        $tokenCacheActionParams = @{
            ExchangeServers = $ExchangeServers
            Action          = if (-not($Rollback)) { "Protect" } else { "Rollback" }
        }

        Invoke-TokenCacheModuleAction @tokenCacheActionParams
    } finally {
        Write-Host ""
        Write-Host "Do you have feedback regarding the script? Please let us know: ExToolsFeedback@microsoft.com."
    }
}
