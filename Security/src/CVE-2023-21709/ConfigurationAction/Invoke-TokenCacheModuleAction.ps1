# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

. $PSScriptRoot\..\..\..\..\Shared\Invoke-ScriptBlockHandler.ps1
. $PSScriptRoot\..\..\..\..\Shared\Write-ErrorInformation.ps1

function Invoke-TokenCacheModuleAction {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true)]
        [string[]]$ExchangeServers,

        [Parameter(Mandatory = $false)]
        [ValidateSet("Protect", "Rollback")]
        [string]$Action = "Protect"
    )

    begin {
        Write-Verbose "Calling: $($MyInvocation.MyCommand)"
        $counter = 0
        $totalCount = $ExchangeServers.Count
        $failedServers =  New-Object 'System.Collections.Generic.List[string]'
        $noImpactServers =  New-Object 'System.Collections.Generic.List[string]'

        $progressParams = @{
            Activity        = if ($Action -eq "Protect") { "Removing TokenCachingModule" } else { "Adding TokenCachingModule" }
            Status          = [string]::Empty
            PercentComplete = 0
        }

        function InvokeTokenCacheModuleConfiguration {
            param (
                [Parameter(Mandatory = $false)]
                [ValidateSet("Protect", "Rollback")]
                [string]$ConfigurationAction = "Protect"
            )

            Write-Verbose "Calling: $($MyInvocation.MyCommand)"
            $results = @{
                TokenCacheModuleInstalled = $false
                ActionSuccessful          = $false
                ErrorContext              = $null
            }

            try {
                $results.TokenCacheModuleInstalled = ($null -ne (Get-WebGlobalModule -Name "TokenCacheModule"))

                if ($ConfigurationAction -eq "Protect") {
                    if ($results.TokenCacheModuleInstalled) {
                        Write-Verbose ("TokenCacheModule was found - trying to remove it now...")
                        $clearWebConfigurationParams = @{
                            Filter      = "/system.webServer/globalModules/add[@name='TokenCacheModule']"
                            PSPath      = "IIS:\"
                            ErrorAction = "Stop"
                        }
                        [void](Clear-WebConfiguration @clearWebConfigurationParams)

                        if (-not($WhatIfPreference)) {
                            $results.ActionSuccessful = ($null -eq (Get-WebGlobalModule -Name "TokenCacheModule"))
                        }
                    } else {
                        Write-Verbose ("TokenCacheModule was not found - no action to perform")
                    }
                } else {
                    if ($results.TokenCacheModuleInstalled -eq $false) {
                        Write-Verbose ("TokenCacheModule was not found - trying to restore it now...")
                        $newWebGlobalModuleParams = @{
                            Name        = "TokenCacheModule"
                            Image       = "%windir%\System32\inetsrv\cachtokn.dll"
                            ErrorAction = "Stop"
                        }
                        [void](New-WebGlobalModule @newWebGlobalModuleParams)

                        if (-not($WhatIfPreference)) {
                            $results.ActionSuccessful = ($null -ne (Get-WebGlobalModule -Name "TokenCacheModule"))
                        }
                    } else {
                        Write-Verbose ("TokenCacheModule was found - no action to perform")
                    }
                }
            } catch {
                Write-Verbose ("We hit an exception: $($_.Exception.Message)")
                $results.ErrorContext = $_
            }
            return $results
        }
    } process {
        if ($WhatIfPreference) {
            Write-Host ("What if: Performing the below actions on the following servers: {0}" -f [string]::Join(", ", $ExchangeServers))
        }

        foreach ($server in $ExchangeServers) {
            Write-Host ("Now processing server: $server")
            $progressParams.PercentComplete = ($counter / $totalCount * 100)
            $progressParams.Status = "Processing: $server - Action: $Action"
            Write-Progress @progressParams

            $counter++

            if (-not($WhatIfPreference)) {
                $configurationActionParams = @{
                    ComputerName = $server
                    ScriptBlock  = ${Function:InvokeTokenCacheModuleConfiguration}
                    ArgumentList = $Action
                }
                $resultsInvoke = Invoke-ScriptBlockHandler @configurationActionParams
            }

            if (-not($WhatIfPreference)) {
                if ($null -eq $resultsInvoke) {
                    Write-Host ("Server: $server is unavailable and will be skipped") -ForegroundColor Yellow
                    $failedServers.Add($server)
                    continue
                }

                if ($Action -eq "Protect") {
                    if ($resultsInvoke.TokenCacheModuleInstalled -eq $false) {
                        Write-Host ("Action is not required on server: $server")
                        $noImpactServers.Add($server)
                        continue
                    }
                } else {
                    if ($resultsInvoke.TokenCacheModuleInstalled) {
                        Write-Host ("Rollback is not required on server: $server")
                        $noImpactServers.Add($server)
                        continue
                    }
                }

                if ($resultsInvoke.ActionSuccessful) {
                    Write-Host ("Successfully performed action '$Action' on server: $server") -ForegroundColor Green
                } else {
                    Write-Host ("Script failed to perform action '$Action' on server: $server") -ForegroundColor Red
                    $failedServers.Add($server)
                    continue
                }
            }
        }
    } end {
        Write-Progress @progressParams -Completed

        if (-not($WhatIfPreference)) {
            if ($failedServers.Length -gt 0) {
                Write-Host ("Unable to perform action '$Action' on the following servers: {0}" -f [string]::Join(", ", $failedServers)) -ForegroundColor Red
            }

            if ($noImpactServers.Length -gt 0) {
                Write-Host ("No need to perform action '$Action' on the following servers: {0} as they are in the expected state" -f [string]::Join(", ", $noImpactServers))
            }
        }
    }
}
