[03/09/2022 16:33:20.0452] [0] **********************************************
[03/09/2022 16:33:20.0468] [0] Starting Microsoft Exchange Server 2019 Setup
[03/09/2022 16:33:20.0468] [0] **********************************************
[03/09/2022 16:33:20.0468] [0] Local time zone: (UTC+09:00) Osaka, Sapporo, Tokyo.
[03/09/2022 16:33:20.0468] [0] Operating system version: Microsoft Windows NT 6.2.9200.0.
[03/09/2022 16:33:20.0515] [0] Setup version: 15.2.922.7.
[03/09/2022 16:33:20.0515] [0] Logged on user: SOLO\Han.
[03/09/2022 16:33:20.0561] [0] Command Line Parameter Name='sourcedir', Value='E:\'.
[03/09/2022 16:33:20.0561] [0] Command Line Parameter Name='mode', Value='Install'.
[03/09/2022 16:33:20.0577] [0] RuntimeAssembly was started with the following command: '/sourcedir:E: /mode:Install'.
[03/09/2022 16:33:30.0640] [0] The following roles are installed: AdminToolsRole 
[03/09/2022 16:33:38.0983] [0] Setup is choosing the domain controller to use
[03/09/2022 16:33:39.0108] [0] The MSExchangeADTopology has a persisted domain controller: DC2.Solo.local
[03/09/2022 16:33:47.0358] [0] PrepareAD has been run, and has replicated to this domain controller; so setup will use DC2.Solo.local
[03/09/2022 16:33:47.0358] [0] Setup is choosing a global catalog...
[03/09/2022 16:33:48.0061] [0] Setup has chosen the global catalog server DC2.Solo.local.
[03/09/2022 16:33:48.0061] [0] Setup will use the domain controller 'DC2.Solo.local'.
[03/09/2022 16:33:48.0061] [0] Setup will use the global catalog 'DC2.Solo.local'.
[03/09/2022 16:33:48.0186] [0] Exchange configuration container for the organization is 'CN=Microsoft Exchange,CN=Services,CN=Configuration,DC=Solo,DC=local'.
[03/09/2022 16:33:48.0296] [0] Exchange organization container for the organization is 'CN=SoloORG,CN=Microsoft Exchange,CN=Services,CN=Configuration,DC=Solo,DC=local'.
[03/09/2022 16:33:48.0311] [0] Setup will search for an Exchange Server object for the local machine with name 'ExSvr1'.
[03/09/2022 16:33:48.0530] [0] Exchange Server object found : 'CN=ExSvr1,CN=Servers,CN=Exchange Administrative Group (FYDIBOHF23SPDLT),CN=Administrative Groups,CN=SoloORG,CN=Microsoft Exchange,CN=Services,CN=Configuration,DC=Solo,DC=local'.
[03/09/2022 16:33:48.0530] [0] The following roles have been unpacked: BridgeheadRole ClientAccessRole MailboxRole FrontendTransportRole AdminToolsRole CafeRole 
[03/09/2022 16:33:48.0530] [0] The following datacenter roles are unpacked: 
[03/09/2022 16:33:48.0530] [0] The following roles are installed: AdminToolsRole 
[03/09/2022 16:33:48.0530] [0] The local server has some Exchange files installed.
[03/09/2022 16:33:48.0546] [0] Server Name=ExSvr1
[03/09/2022 16:33:48.0546] [0] Setup will use the path 'E:\' for installing Exchange.
[03/09/2022 16:33:48.0546] [0] Setup will discover the installed roles from server object 'CN=ExSvr1,CN=Servers,CN=Exchange Administrative Group (FYDIBOHF23SPDLT),CN=Administrative Groups,CN=SoloORG,CN=Microsoft Exchange,CN=Services,CN=Configuration,DC=Solo,DC=local'.
[03/09/2022 16:33:48.0546] [0] 'BridgeheadRole' is installed on the server object.
[03/09/2022 16:33:48.0546] [0] The installation mode is set to: 'Install'.
[03/09/2022 16:33:57.0702] [0] An Exchange organization with name 'SoloORG' was found in this forest.
[03/09/2022 16:33:57.0702] [0] Active Directory Initialization status : 'True'.
[03/09/2022 16:33:57.0702] [0] Schema Update Required Status : 'False'.
[03/09/2022 16:33:57.0702] [0] Organization Configuration Update Required Status : 'False'.
[03/09/2022 16:33:57.0702] [0] Domain Configuration Update Required Status : 'False'.
[03/09/2022 16:33:57.0702] [0] The locally installed version is 15.2.922.7.
[03/09/2022 16:33:57.0702] [0] Exchange Installation Directory : 'D:\Program Files\Microsoft\Exchange Server\V15'.
[03/09/2022 16:33:58.0140] [0] Applying default role selection state
[03/09/2022 16:33:58.0155] [0] Setup is determining what organization-level operations to perform.
[03/09/2022 16:33:58.0155] [0] Because the value was specified, setup is setting the argument OrganizationName to the value SoloORG.
[03/09/2022 16:33:58.0155] [0] Setup will run from path 'D:\Program Files\Microsoft\Exchange Server\V15\'.
[03/09/2022 16:33:58.0171] [0] InstallModeDataHandler has 12 DataHandlers
[03/09/2022 16:33:58.0171] [0] RootDataHandler has 1 DataHandlers
[03/09/2022 16:33:58.0280] [0] CurrentResult launcherbase.maincore:90: 0
[03/09/2022 16:33:58.0546] [0] Finished loading screen IncompleteInstallationDetectedPage.
[03/09/2022 16:34:02.0874] [0] Setup is determining what organization-level operations to perform.
[03/09/2022 16:34:02.0874] [0] Because the value was specified, setup is setting the argument OrganizationName to the value SoloORG.
[03/09/2022 16:34:02.0874] [0] Setup will run from path 'D:\Program Files\Microsoft\Exchange Server\V15\'.
[03/09/2022 16:34:02.0874] [0] InstallModeDataHandler has 12 DataHandlers
[03/09/2022 16:34:02.0874] [0] RootDataHandler has 1 DataHandlers
[03/09/2022 16:34:02.0952] [0] **************
[03/08/2022 21:34:48.0429] [1] Evaluated [Setting:ComputerNameDnsFullyQualified] [HasException:False] [Value:"ExSvr1.Solo.local"] [ParentValue:"<NULL>"] [Thread:54] [Duration:00:00:00]
[03/09/2022 16:48:46.0879] [1] Processing component 'Monitoring Service Configuration' (Installing the Exchange Monitoring service.).
[03/09/2022 16:48:46.0879] [1] Executing: 
          if(($RoleIsDatacenter -eq $true) -or ($RoleIsDatacenterDedicated -eq $true))
          {
            Write-ExchangeSetupLog -Info "Initializing Active Monitoring connection settings on the local machine.";
            $keyPath = "HKLM:\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\";

            new-item $keyPath -force;
            new-itemproperty -path $keyPath -name "RPSCertificateSubject" -value $RoleDatacenterAMManagementCertificateSubject -force;
            new-itemproperty -path $keyPath -name "RPSEndpoint" -value $RoleDatacenterAMManagementPowershellEndpoint -force;
            new-itemproperty -path $keyPath -name "AlertBoxEndpoint" -value $RoleDatacenterAlertBoxEndpoint -force

            if ($RoleDatacenterFfoEnvironment -eq "True")
            {
                # In FFO environment, the AlertsEnabled reg key is written during end maintenance
                # During setup, it stays 0
                new-itemproperty -path $keyPath -name "AlertsEnabled" -value 0 -force;
            }
            else
            {
                new-itemproperty -path $keyPath -name "AlertsEnabled" -value ([int]$RoleDatacenterEscalateResponderAlertsEnabled) -force;
            }

            if ($RoleDatacenterWacMonitoringProbeEnabled -ne $false -and $RoleDatacenterWacServerEndpoint)
            {
                $wacMonitoringConfigFullPath = "$RoleBinPath\Monitoring\Config\wac.xml";
                $wacMonitoringConfig = [xml] (Get-Content $wacMonitoringConfigFullPath);

                if ([string]::IsNullOrEmpty($RoleDatacenterWopiServerEndpointOverride))
                {
                    # Use pod url for WAC probe only in Dedicated and DOnMT environments
                    if ($RoleIsDatacenterDedicated -eq $true -or $RoleDatacenterUsePodUrlsForXAMProbes -eq $true)
                    {
                        $adSite = [System.DirectoryServices.ActiveDirectory.ActiveDirectorySite]::GetComputerSite().GetDirectoryEntry()
                        $urlBase = $RoleDatacenterPodRedirectTemplate -f $adSite.msExchPartnerId.Value
                    }
                    else
                    {
                        $urlBase = $RoleDatacenterE15FlatNamespace
                    }
                    $wopiExchangeServerSecondaryEndpoint = "https://" + $urlBase + ":443/owa/{0}/wopi/files/@/owaatt";
                }
                else
                {
                    $wopiExchangeServerSecondaryEndpoint = $RoleDatacenterWopiServerEndpointOverride;
                }

                Write-ExchangeSetupLog -Info "Setting attribute WacServerEndpoint: $RoleDatacenterWacServerEndpoint";
                Write-ExchangeSetupLog -Info "Setting attribute WopiExchangeServerEndpointOverride: $wopiExchangeServerSecondaryEndpoint";
                $wacMonitoringConfig.DocumentElement.SelectNodes("//ExtensionAttributes[@WopiExchangeServerEndpointOverride]") | foreach {
                    $_.WopiExchangeServerEndpointOverride = $wopiExchangeServerSecondaryEndpoint;
                    $_.WacServerEndpoint = $RoleDatacenterWacServerEndpoint;
                }

                $wacMonitoringConfig.Save($wacMonitoringConfigFullPath);
            }
          }
        
[03/09/2022 16:48:46.0911] [1] Executing: 
          if(($RoleIsDatacenter -eq $true) -or ($RoleIsDatacenterDedicated -eq $true))
          {
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\Eds/ ProcessProcessorTimeTrigger_Warning " /v "SkipMode" /t REG_DWORD /d 1 /f		
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\ComponentHealthPercentFailureMonitor: ServiceComponents/Search/Normal" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\ComponentHealthPercentFailureMonitor: ServiceComponents/Eds/Normal" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\Eds/PrivateWorkingSetTrigger_Warning" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\MSExchangePop3: Average Command Processing Time Red>60s Escalate Responder" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\POP.Protocol : PopProtocolEscalateResponder" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\ComponentHealthPercentFailureMonitor: CustomerTouchPoints/Pop/Normal" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\MSExchangeImap4: Average Command Processing Time Red>60s Escalate Responder" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\MSExchangeImap4: Average Command Processing Time Red>60s" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\IMAP.Protocol : ImapProtocolEscalateResponder" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\Exchange IMAP4 Escalate Responder" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\ComponentHealthPercentFailureMonitor: CustomerTouchPoints/Imap/Normal" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\MSExchangeActiveSync: Requests Queued Red>500 Escalate Responder" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\MSExchangeActiveSync: Requests Queued Red>500" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\ComponentHealthPercentFailureMonitor: CustomerTouchPoints/Eas/Normal" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\GLSRoleDBConnectivity" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\GLSRoleDALConnectivity" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\FfoRoleDBConnectivity" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\FfoRoleDALConnectivity" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\ComponentHealthPercentFailureMonitor: ServiceComponents/Gls/Normal" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\Parameters\Responder\OwaTooManyHttpErrorResponsesEncountered" /v "SkipMode" /t REG_DWORD /d 1 /f
            REG ADD "HKLM\SOFTWARE\Microsoft\ExchangeServer\v15\ActiveMonitoring\HighAvailability\Parameters" /v "OneCopyMonitorStaleAlertInMins" /t REG_DWORD  /d 90 /f
          }
        
[03/09/2022 16:48:46.0926] [1] Processing component 'Search Foundation Service Configuration' (Configuring the server.).
[03/09/2022 16:48:46.0926] [1] Executing: 
            if ($RoleProductPlatform -eq "amd64")
            {
                try
                {
                    # Need to configure the ETL traces before the fast service is installed. This will ensure that when the service comes up
                    # it will have the necessary trace session setting available to read from the registry
                    $fastPerfEtlTraceFolderPath = Join-Path -Path $RoleBinPath -ChildPath "\Search\Ceres\Diagnostics\ETLTraces"
                    $fastDiagnosticTracingRegKeyPath = 'HKLM:\SOFTWARE\Microsoft\Office Server\16.0\Search\Diagnostics\Tracing'
                    if(-not(Test-Path -Path $fastPerfEtlTraceFolderPath))
                    {
                        $null = New-Item $fastPerfEtlTraceFolderPath -Type 'Directory' -Force 
                    }
                    
                    if (-not(Test-Path -Path $fastDiagnosticTracingRegKeyPath))
                    {
                        $null = New-Item -Path $fastDiagnosticTracingRegKeyPath -Force
                    }
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingPath' -PropertyType 'string' -Value $fastPerfEtlTraceFolderPath -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingFileName' -PropertyType 'string' -Value 'DocumentProcessingTrace' -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserSuccessLogMessage' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserLoggingNoInitialisation' -PropertyType 'Dword' -Value 1 -Force
                    
                    # Max trace folder size 50 * 100 = 5GB
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileSize' -PropertyType 'Dword' -Value 50 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileCount' -PropertyType 'Dword' -Value 100 -Force
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'UseGeneralSwitch' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'GeneralSwitch' -PropertyType 'Dword' -Value 0 -Force
                }
                catch
                {
                    # ETl tracing is not critical. Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while trying to Configure the FAST ETL traces. Exception: " + $_.Exception.Message);
                }
                
                $fastInstallConfigPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\Installer";
                $command = Join-Path -Path $fastInstallConfigPath -ChildPath "InstallConfig.ps1";
                $dataFolderPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\HostController\Data";

                try
                {
                    # the BasePort value MUST be kept in sync with dev\Search\src\OperatorSchema\SearchConfig.cs
                    &$command -action i -baseport 3800 -dataFolder $dataFolderPath -silent;
                }
                catch
                {
                    $errorMsg = "Failure configuring SearchFoundation through installconfig.ps1 - " + $_.Exception.Message;
                    Write-ExchangeSetupLog -Error $errorMsg;
                    
                    # Clean up the failed configuration attempt.
                    &$command -action u -silent;
                    try
                    {
                        if ([System.IO.Directory]::Exists($dataFolderPath))
                        {
                            [System.IO.Directory]::Delete($dataFolderPath, $true);
                        }
                    }
                    catch
                    {
                        $deleteErrorMsg = "Failure cleaning up SearchFoundation Data folder. - " + $dataFolderPath + " - " + $_.Exception.Message;
                        Write-ExchangeSetupLog -Error $deleteErrorMsg;
                    }
                }
                
               # Set the PowerShell Snap-in's public key tokens
                try
                {
                    $PowerShellSnapinsPath = "HKLM:\SOFTWARE\Microsoft\PowerShell\1\PowerShellSnapIns\";
                    $FastSnapinNames = @("EnginePSSnapin", "HostControllerPSSnapIn", "InteractionEnginePSSnapIn", "JunoPSSnapin", "SearchCorePSSnapIn");
                    $officePublicKey = "71E9BCE111E9429C";
                    $exchangePublicKey = "31bf3856ad364e35";
                    foreach ($fastSnapinName in $FastSnapinNames)
                    {
                        $fastSnapinPath = $PowerShellSnapinsPath + $fastSnapinName;
                        $assemblyNameProperty = Get-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -ErrorAction SilentlyContinue;
                        if ($assemblyNameProperty -ne $null -and (-not [string]::IsNullOrEmpty($assemblyNameProperty.AssemblyName)))
                        {
                            $newAssemblyName = $assemblyNameProperty.AssemblyName -ireplace ($officePublicKey, $exchangePublicKey);
                            Set-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -Value $newAssemblyName;
                        }
                    }
                }
                catch
                {
                    # Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while configuring Search Foundation PowerShell Snapin. Exception: " + $_.Exception.Message);
                }
            }
        
[03/09/2022 16:48:47.0114] [2] Beginning processing Write-ExchangeSetupLog
[03/09/2022 16:48:47.0114] [2] [ERROR] Failure configuring SearchFoundation through installconfig.ps1 - Old nodes belonging to the system 'Fsis', already exist in 'D:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\HostController\Data'. Rerun the configuration in attach mode, if you need to reuse them.
[03/09/2022 16:48:47.0114] [2] [ERROR] Failure configuring SearchFoundation through installconfig.ps1 - Old nodes belonging to the system 'Fsis', already exist in 'D:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\HostController\Data'. Rerun the configuration in attach mode, if you need to reuse them.
[03/09/2022 16:48:47.0114] [2] Ending processing Write-ExchangeSetupLog
[03/09/2022 16:48:48.0358] [1] The following 1 error(s) occurred during task execution:
[03/09/2022 16:48:48.0358] [1] 0.  ErrorRecord: Failure configuring SearchFoundation through installconfig.ps1 - Old nodes belonging to the system 'Fsis', already exist in 'D:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\HostController\Data'. Rerun the configuration in attach mode, if you need to reuse them.
[03/09/2022 16:48:48.0358] [1] 0.  ErrorRecord: System.Exception: Failure configuring SearchFoundation through installconfig.ps1 - Old nodes belonging to the system 'Fsis', already exist in 'D:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\HostController\Data'. Rerun the configuration in attach mode, if you need to reuse them.
   at Microsoft.Exchange.Configuration.Tasks.Task.ThrowError(Exception exception, ErrorCategory errorCategory, Object target, String helpUrl)
   at Microsoft.Exchange.Management.Deployment.WriteExchangeSetupLog.InternalProcessRecord()
   at Microsoft.Exchange.Configuration.Tasks.Task.<ProcessRecord>b__91_1()
   at Microsoft.Exchange.Configuration.Tasks.Task.InvokeRetryableFunc(String funcName, Action func, Boolean terminatePipelineIfFailed)
[03/09/2022 16:48:48.0358] [1] [ERROR] The following error was generated when "$error.Clear(); 
            if ($RoleProductPlatform -eq "amd64")
            {
                try
                {
                    # Need to configure the ETL traces before the fast service is installed. This will ensure that when the service comes up
                    # it will have the necessary trace session setting available to read from the registry
                    $fastPerfEtlTraceFolderPath = Join-Path -Path $RoleBinPath -ChildPath "\Search\Ceres\Diagnostics\ETLTraces"
                    $fastDiagnosticTracingRegKeyPath = 'HKLM:\SOFTWARE\Microsoft\Office Server\16.0\Search\Diagnostics\Tracing'
                    if(-not(Test-Path -Path $fastPerfEtlTraceFolderPath))
                    {
                        $null = New-Item $fastPerfEtlTraceFolderPath -Type 'Directory' -Force 
                    }
                    
                    if (-not(Test-Path -Path $fastDiagnosticTracingRegKeyPath))
                    {
                        $null = New-Item -Path $fastDiagnosticTracingRegKeyPath -Force
                    }
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingPath' -PropertyType 'string' -Value $fastPerfEtlTraceFolderPath -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'TracingFileName' -PropertyType 'string' -Value 'DocumentProcessingTrace' -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserSuccessLogMessage' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'DocumentParserLoggingNoInitialisation' -PropertyType 'Dword' -Value 1 -Force
                    
                    # Max trace folder size 50 * 100 = 5GB
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileSize' -PropertyType 'Dword' -Value 50 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'MaxTraceFileCount' -PropertyType 'Dword' -Value 100 -Force
                    
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'UseGeneralSwitch' -PropertyType 'Dword' -Value 1 -Force
                    $null = New-ItemProperty -Path $fastDiagnosticTracingRegKeyPath -Name 'GeneralSwitch' -PropertyType 'Dword' -Value 0 -Force
                }
                catch
                {
                    # ETl tracing is not critical. Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while trying to Configure the FAST ETL traces. Exception: " + $_.Exception.Message);
                }
                
                $fastInstallConfigPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\Installer";
                $command = Join-Path -Path $fastInstallConfigPath -ChildPath "InstallConfig.ps1";
                $dataFolderPath = Join-Path -Path $RoleBinPath -ChildPath "Search\Ceres\HostController\Data";

                try
                {
                    # the BasePort value MUST be kept in sync with dev\Search\src\OperatorSchema\SearchConfig.cs
                    &$command -action i -baseport 3800 -dataFolder $dataFolderPath -silent;
                }
                catch
                {
                    $errorMsg = "Failure configuring SearchFoundation through installconfig.ps1 - " + $_.Exception.Message;
                    Write-ExchangeSetupLog -Error $errorMsg;
                    
                    # Clean up the failed configuration attempt.
                    &$command -action u -silent;
                    try
                    {
                        if ([System.IO.Directory]::Exists($dataFolderPath))
                        {
                            [System.IO.Directory]::Delete($dataFolderPath, $true);
                        }
                    }
                    catch
                    {
                        $deleteErrorMsg = "Failure cleaning up SearchFoundation Data folder. - " + $dataFolderPath + " - " + $_.Exception.Message;
                        Write-ExchangeSetupLog -Error $deleteErrorMsg;
                    }
                }
                
               # Set the PowerShell Snap-in's public key tokens
                try
                {
                    $PowerShellSnapinsPath = "HKLM:\SOFTWARE\Microsoft\PowerShell\1\PowerShellSnapIns\";
                    $FastSnapinNames = @("EnginePSSnapin", "HostControllerPSSnapIn", "InteractionEnginePSSnapIn", "JunoPSSnapin", "SearchCorePSSnapIn");
                    $officePublicKey = "71E9BCE111E9429C";
                    $exchangePublicKey = "31bf3856ad364e35";
                    foreach ($fastSnapinName in $FastSnapinNames)
                    {
                        $fastSnapinPath = $PowerShellSnapinsPath + $fastSnapinName;
                        $assemblyNameProperty = Get-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -ErrorAction SilentlyContinue;
                        if ($assemblyNameProperty -ne $null -and (-not [string]::IsNullOrEmpty($assemblyNameProperty.AssemblyName)))
                        {
                            $newAssemblyName = $assemblyNameProperty.AssemblyName -ireplace ($officePublicKey, $exchangePublicKey);
                            Set-ItemProperty -Path $fastSnapinPath -Name "AssemblyName" -Value $newAssemblyName;
                        }
                    }
                }
                catch
                {
                    # Info only log
                    Write-ExchangeSetupLog -Info ("An exception ocurred while configuring Search Foundation PowerShell Snapin. Exception: " + $_.Exception.Message);
                }
            }
        " was run: "System.Exception: Failure configuring SearchFoundation through installconfig.ps1 - Old nodes belonging to the system 'Fsis', already exist in 'D:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\HostController\Data'. Rerun the configuration in attach mode, if you need to reuse them.
   at Microsoft.Exchange.Configuration.Tasks.Task.ThrowError(Exception exception, ErrorCategory errorCategory, Object target, String helpUrl)
   at Microsoft.Exchange.Management.Deployment.WriteExchangeSetupLog.InternalProcessRecord()
   at Microsoft.Exchange.Configuration.Tasks.Task.<ProcessRecord>b__91_1()
   at Microsoft.Exchange.Configuration.Tasks.Task.InvokeRetryableFunc(String funcName, Action func, Boolean terminatePipelineIfFailed)".
[03/09/2022 16:48:48.0358] [1] [ERROR] Failure configuring SearchFoundation through installconfig.ps1 - Old nodes belonging to the system 'Fsis', already exist in 'D:\Program Files\Microsoft\Exchange Server\V15\Bin\Search\Ceres\HostController\Data'. Rerun the configuration in attach mode, if you need to reuse them.
[03/09/2022 16:48:48.0358] [1] [ERROR-REFERENCE] Id=SearchFoundationComponent___9f5053e82ecb4a8f9790bdf498c0664d Component=EXCHANGE14:\Current\Release\Shared\Datacenter\Setup
[03/09/2022 16:48:48.0358] [1] Setup is stopping now because of one or more critical errors.
[03/09/2022 16:48:48.0358] [1] Finished executing component tasks.
[03/09/2022 16:48:48.0389] [1] Ending processing Install-BridgeheadRole
[03/09/2022 16:51:16.0765] [0] CurrentResult setupbase.maincore:396: 0
[03/09/2022 16:51:16.0765] [0] End of Setup
[03/09/2022 16:51:16.0765] [0] **********************************************
